// Booth's Multiplication
// It is an algorithm which helps in reducing the number the additions whenever consequtive 0's & 1's are detected in the multiplier.
// (Q0,Q-1)
// 00 or 11 shift the partial product.
// 10 subtract and shift (A=A-M)
// 01 add and shift  (A=A+M)
// Q-1 is a single bit register or flip flop
// arithmatic right shift performed at every state

//module description

module booth(lda,clra,sfta,ldq,clrq,sftq,ldm,clrf,addsub,ldcnt,din,qm1,clk,eqz,decr,A,M,Q,Z,count);
  input lda,ldq,ldm,clra,clrq,clrf,sfta,sftq,clk,addsub,ldcnt,decr;
  input [15:0]din;
  output qm1,eqz;
  output [15:0]A,M,Q,Z;
  output [4:0]count;
  assign eqz=~count;
  SR AR(A,Z,A[15],clk,lda,clra,sfta);
  SR QR(Q,din,A[0],clk,ldq,clrq,sftq);
  dff QM1(Q[0],qm1,clk,clrf);
  PIPO MR(din,M,clk,ldm);
  ALU AS(Z,A,M,addsub);
  counter CN(count,decr,ldcnt,clk);
endmodule

module SR(data_out,data_in,s_in,clk,ld,clr,sft);
  input s_in,clk,ld,clr,sft;
  input [15:0]data_in;
  output reg [15:0]data_out;
  always @(posedge clk)
    begin
      if (clr) data_out<=0;
      else if (ld) data_out<=data_in;
      else if (sft) data_out<={s_in,data_out[15:1]};
    end
endmodule

module PIPO(data_in,data_out,ld,clk);
  input [15:0]data_in;
  input ld,clk;
  output reg [15:0]data_out;
  always @(posedge clk)
    if (ld) data_out<=data_in;
endmodule

module dff(d,q,clk,clr);
  input d,clk,clr;
  output reg q;
  always @(posedge clk)
    begin
     if (clr) q<=0;
     else q<=d;
    end
endmodule

module ALU(out,in1,in2,addsub);
  input [15:0]in1,in2;
  input addsub;
  output reg [15:0]out;
  always @(*)
    begin
      if (addsub==0) out=in1-in2;
      else out=in1+in2;
    end
endmodule

module counter (data_out,decr,ldcnt,clk);
  input decr,ldcnt,clk;
  output reg[4:0]data_out;
  always @(posedge clk)
    begin
      if (ldcnt) data_out<=5'b10000;
      else if (decr) data_out<=data_out-1;
    end
endmodule

module controller (lda,clra,sfta,ldq,clrq,sftq,ldm,clrf,addsub,start,decr,ldcnt,clk,q0,qm1,done,eqz);
  input clk,q0,qm1,start,eqz;
  output reg lda,clra,sfta,ldq,clrq,sftq,ldm,clrf,addsub,decr,ldcnt,done;
  reg [2:0]state;
  parameter s0=3'b000,s1=3'b001,s2=3'b010,s3=3'b011,s4=3'b100,s5=3'b101,s6=3'b110;
  always @(posedge clk)
    begin
      case (state)
        s0:if(start) state<=s1;
        s1:state<=s2;
        s2:#2 if(({q0,qm1})==2'b01) state<=s3;
          else if(({q0,qm1})==2'b10) state<=s4;
          else state<=s5;
        s3:state <=s5;
        s4:state <=s5;
        s5:#2 if (({q0,qm1}==2'b01)&& !eqz) state<=s3;
        else if (({q0,qm1}==2'b10)&& !eqz) state<=s4;
           else if (eqz) state<=s6;
        s6:state<=s6;
      endcase
    end
  always @(state)
    begin
      case(state)
        s0:begin
          clra=0;lda=0;sfta=0;clrq=0;ldq=0;sftq=0;ldm=0;clrf=0;done=0;end
        s1:begin
          clra=1;clrf=1;ldcnt=1;ldm=1;end
        s2:begin
          clra=0;clrf=0;ldcnt=0;ldm=0;ldq=1;end
        s3:begin
          lda=1;addsub=1;ldq=0;sfta=0;sftq=0;decr=0;end
        s4:begin
          lda=1;addsub=0;ldq=0;sfta=0;sftq=0;decr=0;end
        s5:begin
          sfta=1;sftq=1;lda=0;ldq=0;decr=1;end
        s6:done=1;
        default:begin
          clra=0;sfta=0;ldq=0;sftq=0;end
      endcase
    end
endmodule

// test bench

 module tb;
   reg [15:0]din;
   reg clk,start;
   wire done;
   wire [15:0]A,M,Q,Z;
   wire [4:0]count;
   
   booth B(lda,clra,sfta,ldq,clrq,sftq,ldm,clrf,addsub,ldcnt,din,qm1,clk,eqz,decr,A,M,Q,Z,count);
   controller CTRL(lda,clra,sfta,ldq,clrq,sftq,ldm,clrf,addsub,start,decr,ldcnt,clk,q0,qm1,done,eqz);
   
   initial
     begin
       clk=1'b0;
       #3 start=1'b1;
       #1000 $finish;
     end
   
   always #5 clk=~clk;
   
   initial
     begin
       #12 din=16'b0000000000011100;
       #10 din=16'b0000000000100001;
     end
   
   initial
     begin
       $dumpfile("design.vcd");
       $dumpvars(0,tb);
       $monitor($time, " A=%b Q=%b Q-1=%b %b ",B.A,B.Q,B.QM1.q,done);
     end
 endmodule
